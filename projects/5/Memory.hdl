// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Mux       (a=load, b=false, sel=address[14], out=loadRam);
    Mux       (a=false, b=load, sel=address[14], out=loadScreen);

    Mux16     (a[15]=false, a[14]=false, a[0..13]=address[0..13], 
               b=false, sel=address[14], 
               out[0..13]=ramAddress);

    Mux16     (a=false, b[15]=false, b[0..14]=address, sel=address[14], 
               out[0..12]=screenAddress, out[0..14]=keyboardAddress);

    RAM16K    (in=in, load=loadRam, address=ramAddress, out=ramOut); 
    Screen    (in=in, load=loadScreen, address=screenAddress, out=screenOut);
    Keyboard  (out=keyboardOut);
    Mux16     (a=ramOut, b=screenOut, sel=address[14], out=firstMuxOut);

    // If both the bits are on, it's for the keyboard, or it's invalid address.
    Mux16     (a=firstMuxOut, b=keyboardOut, sel=isKeyboardOrInvalid, out=out);
    And       (a=address[14], b=address[13], out=isKeyboardOrInvalid);
}