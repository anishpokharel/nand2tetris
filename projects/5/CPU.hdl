// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Figure out if the instruction is A or C instruction. 
    Not        (in=instruction[15], out=isInstructionA);
    Mux16      (a=instruction, b=false, sel=instruction[15], out=aInstruction);
    Mux16      (a=false, b=instruction, sel=instruction[15], out=cInstruction);
    
    // Just fanning out the cInstruction and extracting the bits from there. 
    Mux16      (a=cInstruction, b=cInstruction, sel=true, out[12]=loadAorM,
                out[5]=writeA, out[4]=writeD, out[3]=writeM, 
                out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6);
    
    ARegister  (in=aInstruction, load=isInstructionA, out=aRegisterOut, out[0..14]=addressM);
    Mux16      (a=inM, b=aRegisterOut, sel=loadAorM, out=toALUY);
    
    DRegister  (in=aluOutput, load=writeD, out=toALUX);
    ALU        (x=toALUX, y=toALUY, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=aluOutput, zr=zr, ng=ng );
    
    // Right now program counter is just wired up without verifying any logic to complete the circuit. 
    // Fix the program counter's logic. 
    PC         (in=aRegisterOut, inc=ng, load=writeA, reset=reset, out[0..14]=pc);
}
